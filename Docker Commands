
# mount bind commands:

$ docker run -it --name devtest --mount type=bind,source="$(pwd)",target=/app centos:latest => to create/run a new docker container with bind mount, hence anything will be written in the docker host will be reflected into docker container  
$ docker run -it --name devtest -h DevTest -v "$(pwd)":/app centos:latest bash => can do the same bind mounting
########################################
# Image Management Avanced Commands: 

$ sudo docker ls -q => to list all docker image IDs 
$ sudo docker rm $(docker image ls -q) => to delete all images by image ID from a single command
$ docker run -it ngnix:latest --name webserver -h DevOps /bin/bash => to create & run & start a writeable container layer over the specified image "ngnix:latest" if exists if not will pull ngnix image, -- name flag to rename your container -h to rename the host inside the container /bin/bash to use default linux shell
$ docker run -it --name "DevOps" centos:latest bash => to create a new docker container from centos image
$ docker history imageID/name => display image history
$ docker inspect imageID/name => display info about the image such as , Architecture, size, volumes, digest, cmd, workdir,etc, in json format 
$ docker commit containerID ImageID => to create an image from a container.
$ docker import url-tag => to create an image from a tarball
$ docker rmi imageID => to remove an image
$ docker search text => search an image on the offical registry
$ docker login => to login into a registry
$ docker logout => to logout from a registry
########################################
# Container Management CLIs

$ docker attach webserver => to attach/use your dockre container "webserver" terminal interactively
$ docker network create mynet => to create a new network named mynet "by default will be bridge network", also u can use --network flag to create the network whenever excute $docker run command.
$ docker network create --subnet 10.0.0.0/16 mynet => to create a network within a specified IP Address Range
$docker network ls => to list the networks 
$ docker network connect mynet web => to connect container "web" into "mynet" network 
$ docker network disconnect mynet web => to disconnect the container "web" from network "mynet"
$ docker network rm mynet => to remove mynet network

